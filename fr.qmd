---
title: "`r params$title`"
format:
  html:
    toc: false
    css: ["style.css"]
    mainfont: Theinhardt
    fontsize: "16px"
    # To use instead of self-contained that has been deprecated
    embed-resources: true
    # Using custom page layout (via 'style.css')
    page-layout: custom
    # Open link in a new window by default
    link-external-newwindow: true
    # Display footnotes in pop-up window when hovering on it
    footnotes-hover: true
# The empty params are replaced by those passed to "execute_params" when
# rendering
params:
  title: ""
  publication_date: ""
  lang: "fr"
  doi: ""
  github_url: ""
editor_options: 
  chunk_output_type: console
---

```{r general-setup, include=FALSE}

## This file contains the ENGLISH version of the data story

# Set general chunk options
knitr::opts_chunk$set(
  echo = FALSE, fig.showtext = TRUE, fig.retina = 3, fig.align = "center",
  warning = FALSE, message = FALSE
)

# Install snf.datastory package if not available, otherwise load it
if (!require("snf.datastory")) {
  if (!require("devtools")) {
    install.packages("devtools")
    library(devtools)
  }
  install_github("snsf-data/snf.datastory")
  library(snf.datastory)
}

# Load packages
library(tidyverse)
library(lubridate)
library(scales)
library(conflicted)
library(jsonlite)
library(here)
library(glue)
library(ggiraph)
library(showtext)
library(systemfonts)

# Conflict preferences
conflict_prefer("filter", "dplyr")
conflict_prefer("get_datastory_theme", "snf.datastory")
conflict_prefer("get_datastory_scheme", "snf.datastory")

is_theinhardt_available <- file.exists(here("fonts", "TheinhardtReg.otf"))

if (is_theinhardt_available) {
  
  sysfonts::font_add(
    family = "Theinhardt",
    regular = here("fonts", "TheinhardtReg.otf"),
    bold = here("fonts", "TheinhardtBold.otf"),
    bolditalic = here("fonts", "TheinhardtBoldIt.otf"),
    italic = here("fonts", "TheinhardtRegIt.otf"),
  )
  
  # Need to register the font to allow its use by ggiraph when creating SVG
  # files.
  if(!font_family_exists("Theinhardt")){
    
    # Register existing/downloaded fonts
    register_font(
      name = "Theinhardt",
      plain = list("fonts/TheinhardtReg.otf", 0),
      bold = list("fonts/TheinhardtBold.otf", 0),
      italic = list("fonts/TheinhardtRegIt.otf", 0),
      bolditalic = list("fonts/TheinhardtBoldIt.otf", 0)
    )
  }
  
  font <- "Theinhardt"
  
} else {
  
  font <- "Arial"
  
}

# Need if we want to use the registered font in ggiraph plots
showtext_auto()

# Increase showtext package font resolution
showtext_opts(dpi = 320)

# Set the locale for date formatting (Windows)
Sys.setlocale(
  "LC_TIME",
  switch(
    params$lang,
    en = "English",
    de = "German",
    fr = "French"
  )
)

# Create function to print number with local language-specific format
print_num <- function(x) snf.datastory::print_num(x, lang = params$lang)

# Knitr hook for local formatting of printed numbers
knitr::knit_hooks$set(
  inline <- function(x) {
    if (!is.numeric(x)) {
      x
    } else {
      print_num(x)
    }
  }
)

# Function that returns the desired language version of a string, given three
# language strings are provided to the function.
translate <- function(en_string = "NOT TRANSLATED",
                      de_string = "NOT TRANSLATED",
                      fr_string = "NOT TRANSLATED",
                      lang = "en") {
  
  string <-
    case_when(
      lang == "en" ~ en_string, 
      lang == "de" ~ de_string, 
      lang == "fr" ~ fr_string, 
      TRUE ~ "NO VALID LANGUAGE SPECIFIED"
    )
  
  return(string)
  
}

```

```{r print-header-infos}
#| results: asis

# Add publication date to header
cat(format(as_datetime(params$publication_date), "%d.%m.%Y"))
```

```{r story-specific-setup}
#| include: false

# Set story-specific variables etc. here

# E.g. loading data...
```


<!-- Short lead (2-3 sentences) in bold -->

**Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.**

[Nam liber tempor](#) cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat^[This is a citation].   

### Magna aliquam erat volutpat

Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.   



::: plot-box
::: plot-title
Relationship of carat and price of diamonds
:::

```{r example-plot-1}
#| out-width: "100%"
#| fig-height: 3.5

# Another Example of an interactive ggiraph plot, created out of a ggplot plot

# Create ggplot plot
ggplot_plot_1 <- diamonds %>%
  # Only good-quality diamonds
  filter(!(cut %in% c("Fair", "Good"))) %>%
  sample_n(1000) %>%
  count(color, cut) %>%
  mutate(data_id = row_number()) %>%
  ggplot(aes(
    x = color, y = n, fill = cut,
    # Define tooltip text for ggiraph
    tooltip = glue(
      "cut: {cut}<br>",
      "color: {color}<br>",
      "number: {n}"
    ),
    # Highlight all of the points with the same color when hovering
    # over it (ggiraph)
    data_id = data_id
  )) +
  # Hack: Add a geom_col under the interactive one, only to be able to provide
  # correct looking legend items (round although bar chart),
  # geom_col_interactive does not take the argument 'key_glyph'
  geom_col(
    width = 0.1, size = 0.1,
    # Draw point instead of square symbol
    key_glyph = draw_key_dotplot
  ) +
  # Add ggiraph column, don't show it in legend as we're using points (and not
  # squares) according to the style guide there (see hack before)
  geom_col_interactive(color = "white", show.legend = FALSE) +
  scale_fill_manual(values = get_datastory_scheme()) +
  get_datastory_theme(
    tick_axis = c("y"),
    remove_plot_margin = TRUE,
    family = font
  ) +
  theme(text = element_text(family = font))

# Create ggiraph object
girafe_plot_1 <- girafe(
  ggobj = ggplot_plot_1,
  height_svg = 3.5,
  options = list(
    opts_toolbar(saveaspng = FALSE),
    opts_hover(
      css =
        paste0("font-family:", font, ";fill:#c95b40;stroke:white;")),
    opts_tooltip(
      css = 
        str_replace(
          get_ggiraph_tooltip_css(),
          "(font-family:')([\\w\\s]*)(';)",
          paste0("\\1", font, "\\3")
        ),
      opacity = 0.8,
      delay_mouseover = 0,
      delay_mouseout = 0
    )
  )
)
girafe_plot_1
```

::: caption
Data: [Diamonds dataset in ggplot2, a dataset containing the prices and other attributes diamonds](https://ggplot2.tidyverse.org/reference/diamonds.html).
:::
:::


Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.   

### Quis nostrud exerci tation

Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.   


### Exerci tation ullamcorper suscipit

Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.   


::: quote
<p>Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.</p>
:::

Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.   

Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.   


<!-- As the next graph requires a lot of space, we use an area for the graph in the data story that's wider than the text paragraph width using the CSS class "widemedia". As we only want to display this wider area for desktop users, we show the graph in the wide format for them, and in the normal format for mobile/tablet users - making use of the CSS classes "hide-mobile", "hide-tablet", and "hide-desktop". -->

```{r example-plot-2-create}
# Example of an interactive ggiraph plot, created out of a ggplot plot
# Create ggplot plot
ggplot_plot_2 <- diamonds %>%
  sample_n(1000) %>%
  mutate(data_id = row_number()) %>%
  ggplot(aes(
    x = carat, y = price, fill = color,
    # Define tooltip text for ggiraph
    tooltip = glue(
      "carat: {carat}<br>",
      "cut: {cut}<br>",
      "color: {color}<br>",
      "depth: {depth}<br>",
      "<b>price: {price}</b>"
    ),
    # Highlight all of the points with the same color when hovering
    # over it (ggiraph)
    data_id = color
  )) +
  geom_point_interactive(
    shape = 21, size = 2.5, stroke = 0.2,
    color = "white"
  ) +
  get_datastory_theme(
    tick_axis = c("x", "y"),
    remove_plot_margin = TRUE,
    family = font
  ) +
  guides(fill = guide_legend(nrow = 1)) +
  scale_fill_manual(values = get_datastory_scheme())

# Create ggiraph object
girafe_plot_2 <- girafe(
  ggobj = ggplot_plot_2,
  height_svg = 4,
  options = list(
    opts_toolbar(saveaspng = FALSE),
    opts_hover(css = "fill:#c95b40;stroke:#c95b40;"),
    opts_tooltip(
      css = 
        str_replace(
          get_ggiraph_tooltip_css(),
          "(font-family:')([\\w\\s]*)(';)",
          paste0("\\1", font, "\\3")
        ),
      opacity = 0.8,
      delay_mouseover = 0,
      delay_mouseout = 0
    )
  ),
  fonts = list(sans = font)
)
```

::: {.hide-mobile .hide-tablet .widemedia}
::: plot-box
::: plot-title
Relationship of carat and price of diamonds
:::
```{r example-plot-2-desktop}
#| out-width: "100%"
#| fig-height: 4

# This area is displayed in wide format and only seen on desktops
girafe_plot_2
```
::: caption
Data: [Diamonds dataset in ggplot2, a dataset containing the prices and other attributes diamonds](https://ggplot2.tidyverse.org/reference/diamonds.html).
:::
:::
:::

::: hide-desktop
::: plot-box
::: plot-title
Relationship of carat and price of diamonds
:::
```{r example-plot-2-mobile}
#| out-width: "100%"
#| fig-height: 4

# This area is displayed in normal width format and only seen on mobiles/tablets
girafe_plot_2
```
::: caption
Data: [Diamonds dataset in ggplot2, a dataset containing the prices and other attributes diamonds](https://ggplot2.tidyverse.org/reference/diamonds.html).
:::
:::
:::

Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.  

::: info-box

### Data and methods

<p>Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.</p>

* Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.
* At vero eos et accusam et justo duo dolores et ea rebum.
* Lorem ipsum dolor sit amet, consetetur sadipscing elitr.

:::

Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.   

Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.   

<p>
<a class="download-button" href="">download-button</a>
<a class="download-button-blue" href="">blue</a>
<a class="download-button-secondary" href="">secondary</a>
</p>
<p>
<a href="#" class="button">button</a>
<a href="#" class="button-blue">button-blue</a>
<a href="#" class="button-secondary">button-secondary</a>
</p>

Les données, le texte et le code de ce récit de données sont [disponibles sur Github](`r params$github_url`) et [archivés sur Zenodo](`r params$doi`). <br>DOI: `r str_remove(params$doi, "https://doi.org/")`

```{r prevent-internal-snsf-packages, include=FALSE}
#| include: false

# Internal SNSF packages must not be used in data stories, as their
# pre-processing functions are internal and the corporate design differs from
# the data portal.
if (any(c("snfverse", "snf.preprocessing", "snf.plot") %in% 
        loadedNamespaces())) {
  stop(glue(
    "You must not use internal SNSF packages in data stories.",
    " Please resort to snf.datastory."
  ))
}
```
